name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: a1lifter-nextjs/package-lock.json

      - name: Install dependencies
        working-directory: ./a1lifter-nextjs
        run: npm ci

      - name: Run ESLint
        working-directory: ./a1lifter-nextjs
        run: npm run lint

      - name: Check TypeScript
        working-directory: ./a1lifter-nextjs
        run: npx tsc --noEmit

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: a1lifter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: a1lifter-nextjs/package-lock.json

      - name: Install dependencies
        working-directory: ./a1lifter-nextjs
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./a1lifter-nextjs
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./a1lifter-nextjs
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/a1lifter_test

      - name: Run tests
        working-directory: ./a1lifter-nextjs
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/a1lifter_test
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: a1lifter-nextjs/coverage/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: a1lifter-nextjs/package-lock.json

      - name: Install dependencies
        working-directory: ./a1lifter-nextjs
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./a1lifter-nextjs
        run: npx prisma generate

      - name: Build application
        working-directory: ./a1lifter-nextjs
        run: npm run build
        env:
          DATABASE_URL: postgresql://placeholder
          NEXTAUTH_SECRET: placeholder
          NEXTAUTH_URL: http://localhost:3000
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: a1lifter-nextjs/.next/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './a1lifter-nextjs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-preview:
    name: Deploy Preview (Vercel)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./a1lifter-nextjs
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy Production (Vercel)
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./a1lifter-nextjs
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Post deployment health check
        run: |
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status $response"
            exit 1
          fi

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Send notification
        if: success()
        run: echo "✅ Deployment successful!"

      - name: Send failure notification
        if: failure()
        run: echo "❌ Deployment failed!"
