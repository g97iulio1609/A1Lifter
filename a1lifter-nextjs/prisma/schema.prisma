// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  role          UserRole  @default(ATHLETE)
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         UserSession[]
  organizedEvents  Event[]           @relation("EventOrganizer")
  registrations    Registration[]
  attempts         Attempt[]
  judgeAssignments JudgeAssignment[]
  notifications    Notification[]
  
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core Domain Models
model Event {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  sport       Sport
  status      EventStatus @default(PLANNED)
  startDate   DateTime
  endDate     DateTime
  location    String
  maxAthletes Int?
  organizerId String
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  organizer     User           @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Restrict)
  categories    Category[]
  sessions      EventSession[]
  registrations Registration[]
  attempts      Attempt[]
  records       Record[]

  @@index([organizerId])
  @@index([sport])
  @@index([status])
  @@index([startDate])
  @@index([isDeleted])
  @@map("events")
}

model EventSession {
  id        String   @id @default(cuid())
  name      String
  eventId   String
  startTime DateTime
  endTime   DateTime?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([startTime])
  @@map("event_sessions")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  gender    Gender
  minWeight Float?
  maxWeight Float?
  ageMin    Int?
  ageMax    Int?
  eventId   String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registrations Registration[]
  attempts      Attempt[]
  records       Record[]

  @@unique([eventId, name])
  @@index([eventId])
  @@index([gender])
  @@map("categories")
}

model Registration {
  id           String             @id @default(cuid())
  userId       String
  eventId      String
  categoryId   String
  status       RegistrationStatus @default(PENDING)
  bodyWeight   Float?
  lot          Int?               // Draw number
  platform     String?            // Platform assignment
  notes        String?            @db.Text
  registeredAt DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  attempts Attempt[]

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([categoryId])
  @@index([status])
  @@map("registrations")
}

model Attempt {
  id             String        @id @default(cuid())
  userId         String
  eventId        String
  categoryId     String
  registrationId String
  lift           LiftType
  attemptNumber  Int           // 1, 2, or 3
  weight         Float
  result         AttemptResult @default(PENDING)
  judgeScores    Json?         // Store individual judge scores
  videoUrl       String?       // Link to video recording
  notes          String?       @db.Text
  timestamp      DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category     Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, lift, attemptNumber])
  @@index([userId])
  @@index([eventId])
  @@index([categoryId])
  @@index([registrationId])
  @@index([result])
  @@index([timestamp])
  @@map("attempts")
}

model JudgeAssignment {
  id        String    @id @default(cuid())
  userId    String
  eventId   String
  role      JudgeRole
  platform  String?   // Platform assignment
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@map("judge_assignments")
}

model Record {
  id         String     @id @default(cuid())
  eventId    String
  categoryId String
  lift       LiftType
  weight     Float
  userId     String     // User who set the record
  userName   String     // Denormalized for performance
  recordType RecordType
  previousRecord Float?  // Previous record value
  setAt      DateTime   @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  // Relations
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@index([eventId])
  @@index([categoryId])
  @@index([lift])
  @@index([recordType])
  @@map("records")
}

// Notification system for real-time updates
model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String           @db.Text
  data        Json?            // Additional payload
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  ORGANIZER
  JUDGE
  ATHLETE
}

enum Sport {
  POWERLIFTING
  WEIGHTLIFTING
  STRONGMAN
  CROSSFIT
  STREETLIFTING
}

enum EventStatus {
  PLANNED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  MIXED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLIST
}

enum LiftType {
  SQUAT
  BENCH
  DEADLIFT
  SNATCH
  CLEAN_AND_JERK
  OVERHEAD_PRESS
  // Strongman lifts
  ATLAS_STONES
  LOG_PRESS
  TIRE_FLIP
  // CrossFit movements
  THRUSTER
  PULL_UP
  BOX_JUMP
}

enum AttemptResult {
  PENDING
  GOOD
  NO_LIFT
  DISQUALIFIED
}

enum JudgeRole {
  HEAD_JUDGE
  SIDE_JUDGE
  TECHNICAL_JUDGE
}

enum RecordType {
  EVENT_RECORD
  COMPETITION_RECORD
  PERSONAL_RECORD
}

enum NotificationType {
  REGISTRATION_APPROVED
  REGISTRATION_REJECTED
  ATTEMPT_UPCOMING
  RESULT_POSTED
  EVENT_UPDATE
  SYSTEM_ANNOUNCEMENT
}