generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String?
  image              String?
  role               UserRole          @default(ATHLETE)
  emailVerified      DateTime?
  isActive           Boolean           @default(true)
  mustChangePassword Boolean           @default(false)
  lastLoginAt        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  password           String?
  accounts           Account[]
  attempts           Attempt[]
  lockedAttempts     Attempt[]         @relation("AttemptLockedBy")
  judgedAttempts     Attempt[]         @relation("AttemptJudgedBy")
  organizedEvents    Event[]           @relation("EventOrganizer")
  judgeAssignments   JudgeAssignment[]
  notifications      Notification[]
  registrations      Registration[]
  sessions           UserSession[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id            String         @id @default(cuid())
  name          String
  description   String?
  sport         Sport
  status        EventStatus    @default(PLANNED)
  startDate     DateTime
  endDate       DateTime
  location      String
  maxAthletes   Int?
  organizerId   String
  liveStreamUrl String?
  liveStreamEmbed String?
  liveStreamActive Boolean @default(false)
  isDeleted     Boolean        @default(false)
  deletedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attempts      Attempt[]
  categories    Category[]
  sessions      EventSession[]
  organizer     User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  records       Record[]
  registrations Registration[]

  @@index([organizerId])
  @@index([sport])
  @@index([status])
  @@index([startDate])
  @@index([isDeleted])
  @@map("events")
}

model EventSession {
  id        String    @id @default(cuid())
  name      String
  eventId   String
  startTime DateTime
  endTime   DateTime?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([startTime])
  @@map("event_sessions")
}

model Category {
  id            String         @id @default(cuid())
  name          String
  gender        Gender
  minWeight     Float?
  maxWeight     Float?
  ageMin        Int?
  ageMax        Int?
  eventId       String
  order         Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attempts      Attempt[]
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  records       Record[]
  registrations Registration[]

  @@unique([eventId, name])
  @@index([eventId])
  @@index([gender])
  @@map("categories")
}

model Registration {
  id           String             @id @default(cuid())
  userId       String
  eventId      String
  categoryId   String
  status       RegistrationStatus @default(PENDING)
  bodyWeight   Float?
  lot          Int?
  platform     String?
  notes        String?
  registeredAt DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  attempts     Attempt[]
  category     Category           @relation(fields: [categoryId], references: [id])
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([categoryId])
  @@index([status])
  @@map("registrations")
}

model Attempt {
  id             String        @id @default(cuid())
  userId         String
  eventId        String
  categoryId     String
  registrationId String
  lift           LiftType
  attemptNumber  Int
  weight         Float
  result         AttemptResult @default(PENDING)
  status         AttemptStatus @default(QUEUED)
  judgeScores    Json?
  videoUrl       String?
  notes          String?
  timestamp      DateTime      @default(now())
  lockedBy       String?
  lockedAt       DateTime?
  judgedAt       DateTime?
  judgedBy       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  category       Category      @relation(fields: [categoryId], references: [id])
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registration   Registration  @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lockedByUser   User?         @relation("AttemptLockedBy", fields: [lockedBy], references: [id])
  judgedByUser   User?         @relation("AttemptJudgedBy", fields: [judgedBy], references: [id])

  @@unique([userId, eventId, lift, attemptNumber])
  @@index([userId])
  @@index([eventId])
  @@index([categoryId])
  @@index([registrationId])
  @@index([result])
  @@index([status])
  @@index([lockedBy])
  @@index([judgedBy])
  @@index([timestamp])
  @@map("attempts")
}

enum AttemptStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
}

model JudgeAssignment {
  id        String    @id @default(cuid())
  userId    String
  eventId   String
  role      JudgeRole
  platform  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@map("judge_assignments")
}

model Record {
  id             String     @id @default(cuid())
  eventId        String
  categoryId     String
  lift           LiftType
  weight         Float
  userId         String
  userName       String
  recordType     RecordType
  previousRecord Float?
  setAt          DateTime   @default(now())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  category       Category   @relation(fields: [categoryId], references: [id])
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([categoryId])
  @@index([lift])
  @@index([recordType])
  @@map("records")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum UserRole {
  ADMIN
  ORGANIZER
  JUDGE
  ATHLETE
  USER
  SUPER_ADMIN
}

enum Sport {
  POWERLIFTING
  WEIGHTLIFTING
  STRONGMAN
  CROSSFIT
  STREETLIFTING
}

enum EventStatus {
  PLANNED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  MIXED
  OTHER
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLIST
}

enum LiftType {
  SQUAT
  BENCH
  DEADLIFT
  SNATCH
  CLEAN_AND_JERK
  OVERHEAD_PRESS
  ATLAS_STONES
  LOG_PRESS
  TIRE_FLIP
  THRUSTER
  PULL_UP
  BOX_JUMP
}

enum AttemptResult {
  PENDING
  GOOD
  NO_LIFT
  DISQUALIFIED
}

enum JudgeRole {
  HEAD_JUDGE
  SIDE_JUDGE
  TECHNICAL_JUDGE
}

enum RecordType {
  EVENT_RECORD
  COMPETITION_RECORD
  PERSONAL_RECORD
}

enum NotificationType {
  REGISTRATION_APPROVED
  REGISTRATION_REJECTED
  ATTEMPT_UPCOMING
  RESULT_POSTED
  EVENT_UPDATE
  SYSTEM_ANNOUNCEMENT
}
