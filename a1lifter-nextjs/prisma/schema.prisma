// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User and Authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(ATHLETE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile          AthleteProfile?
  eventOrganizer   Event[]
  judgeAssignments JudgeAssignment[]
  attempts         Attempt[]
  registrations    Registration[]

  @@map("users")
}

enum UserRole {
  ATHLETE
  JUDGE
  HEAD_JUDGE
  ORGANIZER
  SCORER
  VOLUNTEER
  VIEWER
}

// Sports and Disciplines
model Sport {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  isActive    Boolean @default(true)

  // Relations
  disciplines Discipline[]
  events      Event[]

  @@map("sports")
}

model Discipline {
  id           String      @id @default(cuid())
  name         String
  sportId      String
  maxAttempts  Int         @default(3)
  unit         String      @default("kg")
  scoringType  ScoringType @default(WEIGHT)
  description  String?
  isDefault    Boolean     @default(false)

  // Relations
  sport    Sport     @relation(fields: [sportId], references: [id], onDelete: Cascade)
  attempts Attempt[]

  @@unique([name, sportId])
  @@map("disciplines")
}

enum ScoringType {
  WEIGHT
  TIME
  DISTANCE
  POINTS
  REPS
}

// Events and Competitions
model Event {
  id            String      @id @default(cuid())
  name          String
  description   String?
  sportId       String
  organizerId   String
  startDate     DateTime
  endDate       DateTime
  location      String
  status        EventStatus @default(DRAFT)
  isPublic      Boolean     @default(true)
  maxAthletes   Int?
  registrationFee Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  sport         Sport           @relation(fields: [sportId], references: [id])
  organizer     User            @relation(fields: [organizerId], references: [id])
  sessions      Session[]
  registrations Registration[]
  categories    Category[]

  @@map("events")
}

enum EventStatus {
  DRAFT
  OPEN
  REGISTRATION_CLOSED
  ACTIVE
  COMPLETED
  CANCELLED
}

model Session {
  id        String    @id @default(cuid())
  eventId   String
  name      String
  startTime DateTime
  endTime   DateTime?
  status    SessionStatus @default(SCHEDULED)

  // Relations
  event    Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attempts Attempt[]
  judgeAssignments JudgeAssignment[]

  @@map("sessions")
}

enum SessionStatus {
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
}

// Athletes and Categories
model AthleteProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          Gender
  bodyWeight      Float?
  federation      String?
  membershipId    String?
  personalRecords Json?    // Flexible structure for PRs by discipline
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@map("athlete_profiles")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Category {
  id        String @id @default(cuid())
  eventId   String
  name      String
  gender    Gender?
  ageMin    Int?
  ageMax    Int?
  weightMin Float?
  weightMax Float?

  // Relations
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@map("categories")
}

// Registrations and Participation
model Registration {
  id          String             @id @default(cuid())
  userId      String
  eventId     String
  categoryId  String?
  status      RegistrationStatus @default(PENDING)
  bodyWeight  Float?
  rackHeights Json?              // Rack heights for different lifts
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  user     User            @relation(fields: [userId], references: [id])
  event    Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category?       @relation(fields: [categoryId], references: [id])
  profile  AthleteProfile? @relation(fields: [userId], references: [userId])

  @@unique([userId, eventId])
  @@map("registrations")
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CHECKED_IN
  WITHDRAWN
}

// Judging and Attempts
model JudgeAssignment {
  id        String @id @default(cuid())
  userId    String
  sessionId String
  position  String // "head", "side1", "side2", etc.

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@map("judge_assignments")
}

model Attempt {
  id           String        @id @default(cuid())
  userId       String
  sessionId    String
  disciplineId String
  attemptNumber Int
  weight       Float?
  result       AttemptResult
  judges       Json?         // Judge decisions
  timestamp    DateTime      @default(now())

  // Relations
  user       User       @relation(fields: [userId], references: [id])
  session    Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  discipline Discipline @relation(fields: [disciplineId], references: [id])

  @@unique([userId, sessionId, disciplineId, attemptNumber])
  @@map("attempts")
}

enum AttemptResult {
  GOOD
  NO_LIFT
  PENDING
}

// Performance and Analytics
model CompetitionResult {
  id           String   @id @default(cuid())
  userId       String
  eventId      String
  categoryId   String?
  totalScore   Float?
  coefficient  Float?   // Wilks, DOTS, etc.
  placing      Int?
  isRecord     Boolean  @default(false)
  recordType   String?  // "event", "federation", "national", etc.
  createdAt    DateTime @default(now())

  @@unique([userId, eventId])
  @@map("competition_results")
}